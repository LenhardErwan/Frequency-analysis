#include <string>
#include <iostream>
#include <fstream>
#include <map>

/**
 * @brief calcul la fr√©quence de chaque √©l√©ment d'une map
 * @param std::map<std::string, int>::iterator begin : pointeur sur le premier √©l√©ment de la map
 * @param std::map<std::string, int>::iterator end : pointeur sur le dernier √©l√©ment de la map
 * @param unsigned long nbChar : Nombre de carat√®re reconnu dans le fichier, diviseur pour faire la fr√©quence.  
 * @return std::map<std::string, float>* : map avec le caract√®re et sa fr√©quence
 */
std::map<std::string, float>* calcFrequence(std::map<std::string, int>::iterator begin, std::map<std::string, int>::iterator end, unsigned long nbChar) {
    std::map<std::string, float>* map = new std::map<std::string, float>;   //Cr√©er une map

    for (std::map<std::string, int>::iterator it = begin; it != end; ++it) {    //Parcours toute la map
        map->emplace(it->first, (float) it->second / nbChar );  //Pour chaque √©l√©ment on calcul sa fr√©quence
    }

    return map; //retourne la map avec les fr√©quence
}

/**
 * @brief Permet d'avoir les fr√©quence des lettre de l'alphabet sur un fichier
 * @param unsigned long& nbIte : Nombre d'it√©rations effectu√©es (nombre de carat√®res analys√©s)
 * @param std::string path : chemin vers le fichier depuis l'√©xecutable
 * @return std::map<std::string, float>* : map qui contient pour cl√© le caract√®re et pour valeur sa fr√©quence 
 */

std::map<std::string, float>* freqLetter(/*out*/ unsigned long& nbIte, std::string path) {
    std::ifstream fic;
    fic.open(path, std::ios_base::in);  //Ouvre le fichier en lecture
    if( !fic.is_open() )    //Si le fichier n'est pas ouvert
        throw std::ios_base::failure("Impossible d'ouvrir le fichier: \"" + path + "\" !"); //Alors on √©met une erreur

    std::map<std::string, int> * map = new std::map<std::string, int>;  //Cr√©er une map avec pour cl√© les caract√®re et pour valeur leur it√©ration

    for (char letter = 'a'; letter <= 'z'; ++letter) {  //Permet d'avoir tout l'alphabet en minuscule
        map->emplace(std::string(1, letter), 0);    //rempli la map avec l'alaphabet initialis√© √† 0
    }

    /////////////////////////////////////
    //Ceci fonctionne ^^ MAIS bon le prof en a pas besoin
    //map->emplace(std::string(1, '√ß'), 0);
    //map->emplace(std::string(1, 'üôÉ'), 0);
    /////////////////////////////////////

    char c; //Caract√®re lut
    unsigned long count = 0;    //Compte le nombre de caract√®re pris en compte dans l'analyse
    std::map<std::string, int>::iterator it;    //cr√©√© un it√©rateur sur la map

    while (fic.get(c)) {    //Tant que il y a des caract√®res a lire
        it = map->find(std::string(1, c));  //L'it√©rateur prend la valeur de la case de la map qui contient le caract√®re s'il existe, sinon il prend la fin de la liste
        if(it != map->end()) {  //Si le caract√®re existe dans la map
            ++it->second;   //Incr√©mente la valeur du caract√®re
            ++count;    //Incr√©mente le nombre de caract√®re pris en compte dans l'analyse
        }
    }
    
    nbIte = count;  //Le nombre pass√© en param√®tre prend la valeur du nombre de caract√®res analys√©s pris en compte
    std::map<std::string, float>* fmap = calcFrequence(map->begin(), map->end(), count);    //Cr√©er les fr√©quence et la map finale

    fic.close();    //ferme le fichier (lib√®re la m√©moire je suppose)
    delete map;     //delete la map temporaire
    return fmap;    //retourne la map avec les fr√©quence
}


std::map<std::string, float>* freqDigramme(/*out*/ unsigned long& nbIte, std::string path) {
    std::ifstream fic;
    fic.open(path, std::ios_base::in);  //Ouvre le fichier en lecture
    if( !fic.is_open() )    //Si le fichier n'est pas ouvert
        throw std::ios_base::failure("Impossible d'ouvrir le fichier: \"" + path + "\" !"); //Alors on √©met une erreur

    std::map<std::string, int> * map = new std::map<std::string, int>;  //Cr√©er une map avec pour cl√© les caract√®re et pour valeur leur it√©ration

    //G√©n√®re les digrammes
    for (char letter1 = 'a'; letter1 <= 'z'; ++letter1) { 
        for (char letter2 = 'a'; letter2 <= 'z'; ++letter2) {
            map->emplace(std::string() + letter1 + letter2, 0);    //rempli la map avec les digrammes initialis√© √† 0
        }
    }

    char c; //Caract√®re lut
    std::string digramme = "";  //Variable temporaire qui prend le caract√®re extrait + le suivant (non  extrait)
    unsigned long count = 0;    //Compte le nombre de caract√®re pris en compte dans l'analyse
    std::map<std::string, int>::iterator it;    //cr√©√© un it√©rateur sur la map

    while (fic.get(c)) {    //Tant que il y a des caract√®res a lire
        digramme = std::string() + c + (char) fic.peek();
        it = map->find(digramme);  //L'it√©rateur prend la valeur de la case de la map qui contient le caract√®re s'il existe, sinon il prend la fin de la liste
        if(it != map->end()) {  //Si le caract√®re existe dans la map
            ++it->second;   //Incr√©mente la valeur du caract√®re
            ++count;    //Incr√©mente le nombre de caract√®re pris en compte dans l'analyse
        }
    }

    nbIte = count;  //Le nombre pass√© en param√®tre prend la valeur du nombre de caract√®res analys√©s pris en compte
    std::map<std::string, float>* fmap = calcFrequence(map->begin(), map->end(), count);    //Cr√©er les fr√©quence et la map finale

    fic.close();
    delete map;
    return fmap;
}


int main() {
    std::string path = "./test.txt";    //Il faudrai le pass√© en argument du programme
    unsigned long nbIte = 0;  //Variable qui prend le nombre d'it√©ration
    std::map<std::string, float> * freqLet;
    std::map<std::string, float> * freqDig;

    try {
        freqLet = freqLetter(nbIte, path);   //R√©cup√®re la map avec les fr√©quences du fichier
        
        //A ecrire dans un fichier
        /*std::cout << freqLet->size() << ", nbCar = " << nbIte << std::endl; //Affiche la taille de la map et le nombre de caract√®re analys√© pris en compte

        for (std::map<std::string, float>::iterator it = freqLet->begin(); it != freqLet->end(); ++it) {    //Parcours de la liste
            std::cout << it->first << " has value " << it->second << std::endl; //Pour chaque √©l√©ment on affiche le caract√®re et sa fr√©quence
        }
        */

        freqDig = freqDigramme(nbIte, path);
        //A ecrire dans un fichier
        /*std::cout << freqLet->size() << ", nbCar = " << nbIte << std::endl; //Affiche la taille de la map et le nombre de caract√®re analys√© pris en compte

        for (std::map<std::string, float>::iterator it = freqLet->begin(); it != freqLet->end(); ++it) {    //Parcours de la liste
            std::cout << it->first << " has value " << it->second << std::endl; //Pour chaque √©l√©ment on affiche le caract√®re et sa fr√©quence
        }
        */
    }
    catch (std::out_of_range & e) { //Si le fichier ne peux pas s'ouvrire
        std::cerr << e.what() << std::endl;
    }
    
    delete freqLet;         //Lib√®re la m√©moire
    delete freqDig;
    return EXIT_SUCCESS;    //FIN
}


